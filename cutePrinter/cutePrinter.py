import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QTextEdit, QLabel, QPushButton, QComboBox
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import pyqtSlot
import qrcode
import subprocess

class CutePrinter(QWidget):
    """
    CutePrinter is a GUI application for generating QR codes from text input
    and printing them using a selected printer from the available network printers.
    """

    def __init__(self):
        """Initialize the CutePrinter application with a UI setup."""
        super().__init__()
        self.initUI()

    def initUI(self):
        """Set up the UI components of the CutePrinter application."""
        self.setWindowTitle('cutePrinter')
        self.layout = QVBoxLayout()

        self.textEdit = QTextEdit()
        self.textEdit.textChanged.connect(self.onTextChanged)
        self.layout.addWidget(self.textEdit)

        self.imageLabel = QLabel()
        self.layout.addWidget(self.imageLabel)

        self.printerComboBox = QComboBox()
        self.populatePrinters()
        self.layout.addWidget(self.printerComboBox)

        self.printButton = QPushButton('Print Now')
        self.printButton.clicked.connect(self.onPrintNow)
        self.layout.addWidget(self.printButton)

        self.setLayout(self.layout)
        self.resize(400, 300)

    @pyqtSlot()
    def onTextChanged(self):
        """Generate and display a QR code based on the text input."""
        text = self.textEdit.toPlainText()
        if text:
            qr = qrcode.make(text)
            img_qt = self.convertToQtImage(qr)
            self.imageLabel.setPixmap(QPixmap.fromImage(img_qt))

    def convertToQtImage(self, img):
        """
        Convert the QR code image to a QPixmap compatible with PyQt.

        Args:
            img: The QR code image generated by the qrcode library.

        Returns:
            A QImage object compatible with PyQt.
        """
        img.save("temp.jpg")
        qt_img = QImage("temp.jpg")
        return qt_img

    def populatePrinters(self):
        """Populate the printer combo box with available network printers."""
        self.printerComboBox.addItem("None")
        printers = subprocess.check_output("lpstat -e", shell=True).decode().split('\n')
        for printer in printers:
            if printer:
                self.printerComboBox.addItem(printer)

    @pyqtSlot()
    def onPrintNow(self):
        """Print the current QR code to the selected printer."""
        selectedPrinter = self.printerComboBox.currentText()
        if selectedPrinter and selectedPrinter != "None":
            subprocess.run(["lp", "-d", selectedPrinter, "temp.jpg"])

def main():
    """Run the CutePrinter application."""
    app = QApplication(sys.argv)
    ex = CutePrinter()
    ex.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
