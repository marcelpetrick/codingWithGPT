import os
import time
import requests


class AutoDecorator:
    def __init__(self):
        self.api_key = os.environ.get("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OpenAI API key not found in environment variables.")

    def analyze_and_decorate_file(self, path):
        if not os.path.isfile(path):
            print(f"Error: The file '{path}' does not exist.")
            return

        with open(path, 'r', encoding='utf-8') as file:
            content = file.read()

        char_count = len(content)
        token_count = round(char_count / 4)  # Rough estimation
        print(f"{os.path.basename(path)} - Char count: {char_count} - Token count: {token_count}")

        start_time = time.time()
        decorated_content = self.send_to_gpt4(content)
        elapsed_time = time.time() - start_time
        print(f"API request took {elapsed_time:.2f} seconds.")

        with open(path, 'w', encoding='utf-8') as file:
            file.write(decorated_content)

    def send_to_gpt4(self, content):
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        print("headers: ", headers)

        prompt = ("You are a master technical writer. You got the task to write doxygen-comments "
                  "for the given file. Analyze it and check what language it is, but keep this info to yourself. Write me proper "
                  "doxygen comments for each class, method, and everything. Cover the whole public "
                  "interface. Write a 'brief', all 'params' and 'returns'. Use the proper doxygen syntax. Return the transformed code, nothing else. No additional output.")

        payload = {
            "model": "gpt-4",
            #"prompt": f"{prompt}\n\n{content}",
            #"response_format": {"type": "json_object"},
               "messages": [
                  {
                    "role": "system",
                    "content": f"{prompt}",
                  },
                  {
                    "role": "user",
                    "content": f"{content}",
                  }
                ],
            "max_tokens": 4096,
            #"temperature": 0.5,
            #"top_p": 1.0,
            #"frequency_penalty": 0.0,
            #"presence_penalty": 0.0
        }
        print("payload: ", payload)

        try:
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload
            )
            response.raise_for_status()  # This will raise an exception for HTTP error responses
            print("-----------------response.json()-----------------")
            print(response.json()['choices'][0])
            print("----------------- now try to parse-----------------")
            generated_text = response.json()['choices'][0]['message']['content']
            return generated_text
        except requests.exceptions.RequestException as e:
            print(f"Failed to send request to OpenAI: {e}")
            return content  # Return original content in case of failure


# Then, you can create an instance of AutoDecorator and use it:
decorator = AutoDecorator()
decorator.analyze_and_decorate_file("test/autoGeneratedUncommentedCppCode/LibrarySystem.h")
