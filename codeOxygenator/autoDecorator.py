import os
import time
from openai import OpenAI

class AutoDecorator:
    def __init__(self):
        # Reads the API key from environment variable
        self.api_key = os.environ.get("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OpenAI API key not found in environment variables.")
        self.openAiClient = OpenAI(api_key=self.api_key)

    def analyze_and_decorate_file(self, path):
        # Check if the file exists
        if not os.path.isfile(path):
            print(f"Error: The file '{path}' does not exist.")
            return

        with open(path, 'r', encoding='utf-8') as file:
            content = file.read()

        char_count = len(content)
        # Rough estimation: 1 token ~ 4 characters
        token_count = round(char_count / 4)

        print(f"{os.path.basename(path)} - Char count: {char_count} - Token count: {token_count}")

        # Send file content to GPT-4 for doxygen comments
        start_time = time.time()
        decorated_content = self.send_to_gpt4(content)
        elapsed_time = time.time() - start_time
        print(f"API request took {elapsed_time:.2f} seconds.")

        # Replace the original file content with the decorated content
        with open(path, 'w', encoding='utf-8') as file:
            file.write(decorated_content)

    def send_to_gpt4(self, content):
        prompt = ("You are a master technical writer. You got the task to write doxygen-comments "
                  "for the given file. Analyze it and check what language it is. Write me proper "
                  "doxygen comments for each class, method, and everything. Cover the whole public "
                  "interface. Write a 'brief', all 'params' and 'returns'. Also write 'hint' in case "
                  "you notice something troublesome for that function.")
        full_prompt = f"{prompt}\n\n{content}"

        try:
            response = self.openAiClient.chat.completions.create(
                model="gpt-4",
                messages=full_prompt,
                #temperature=0,
                max_tokens=4000,
                #frequency_penalty=0.0
            )
            return response.choices[0].text.strip()
        except Exception as e:
            print(f"Failed to generate decoration: {e}")
            return content  # Return original content in case of failure

# To use this class, ensure the OPENAI_API_KEY environment variable is set:
# export OPENAI_API_KEY='your_api_key_here'

# Then, you can create an instance of AutoDecorator and use it:
decorator = AutoDecorator()
decorator.analyze_and_decorate_file("test/autoGeneratedUncommentedCppCode/LibrarySystem.cpp")

# Failed to generate decoration: Error code: 404 - {'error': {'message': 'This is a chat model and not supported in the v1/completions endpoint. Did you mean to use v1/chat/completions?', 'type': 'invalid_request_error', 'param': 'model', 'code': None}}
# API request took 0.51 seconds.
